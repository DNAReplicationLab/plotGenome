#~ }
if ("name.rep" %in% colnames(ratioDF)) {
ratioDF$name.rep <- factor(ratioDF$name.rep, levels = unique(ratioDF$name.rep))
}
if ("name.nonRep" %in% colnames(ratioDF)) {
ratioDF$name.nonRep <- factor(ratioDF$name.nonRep, levels = unique(ratioDF$name.nonRep))
}
## initiate group number (j)
#~ if ("group" %in% colnames(ratioDF)) {
#~ if (!is.na(suppressWarnings(max(as.numeric(ratioDF$group))))) {
#~ j <- max(ratioDF$group)+1
#~ }
#~ } else {
#~ j <- 1
#~ }
j <- 1
##  create dummy columns "group" and "splineSmooth"
ratioDF$group <- paste("NA")
ratioDF$splineSmooth <- paste("NA")
##  initiate vectors
bin <- vector(mode="numeric",length=0)
group <- vector(mode="numeric",length=0)
##  Actions on every ratio in the supplied dataframe
for (ratio in unique(paste(as.character(ratioDF$name.rep),as.character(ratioDF$name.nonRep)))) {
if (length(grep(" ",ratio))==1) {
ratio <- unlist(strsplit(ratio," "))
rep <- ratio[1]
nonRep <- ratio[2]
#~ currentRatio <- ratioDF[ratioDF$name.rep==rep & ratioDF$name.nonRep==nonRep,]
rows <- which(ratioDF$name.rep==rep & ratioDF$name.nonRep==nonRep)
chroms <- ratioDF[rows,"chrom"]
chroms <- factor(chroms,levels=unique(chroms))
allStarts <- ratioDF[rows,"chromStart"]
anEnd <- ratioDF[rows,"chromEnd"][1]
bin <- append(bin,anEnd-allStarts[1])
if (length(unique(bin))!=1) {
stop("All samples must have the same genomic bin size")
} else {
bin <- unique(bin)
}
##  Actions on every chromosome of the current ratio
for (chr in levels(chroms)) {
## Grouping lines
 starts <- allStarts[chroms==chr]
group <- j
i <- 1
for (i in 1:(length(starts)-1)) {
i <- i + 1
if ( (starts[i] - starts[i-1])/bin > (split-1) ) { j <- j+1 }
group <- append(group,j)
}
## Remove small groups
for (aGroup in unique(group)) {
tmp<-which(group == aGroup)
if (length(tmp) < groupMin) {
group[tmp] <- NA
}
}
ratioDF[ratioDF$name.rep==rep & ratioDF$name.nonRep==nonRep & ratioDF$chrom==chr,"group"] <- as.integer(group)
j <- j+1
}
}
}
#~ Smoothing (spline) in groups
for (aGroup in as.integer(unique(na.omit(ratioDF$group)))) {
rows <- which(ratioDF$group==aGroup)
x <- ratioDF[rows,"chromStart"]
y <- ratioDF[rows,"ratio"]
splineObject <- smooth.spline(x,y)
ratioDF[rows,"splineSmooth"] <- round(as.numeric(splineObject$y),3)
}
ratioDF$splineSmooth <- suppressWarnings(as.numeric(ratioDF$splineSmooth))
ratioDF$group <- suppressWarnings(as.integer(ratioDF$group))
return(ratioDF)
}
plotGenome <- function(ratioDFs,genome=NULL,region=F,guide=NULL,geom="geom_point",circles=NULL,pointers=NULL,rectangles=NULL,plotting=T) {
#~ ratioDFs <- data.frame(matrix(unlist(ratioDFs),nrow=nrow(ratioDFs)),stringsAsFactors=F)
#~ warning(paste("ratioDFs before:",printColTypes(ratioDFs)))
##  undoing damage done by reactive value stoarge
ratioDFs$chrom <- factor(ratioDFs$chrom, levels = unique(ratioDFs$chrom))
ratioDFs$name.rep <- factor(ratioDFs$name.rep, levels=unique(ratioDFs$name.rep))
ratioDFs$name.nonRep <- factor(ratioDFs$name.nonRep, levels=unique(ratioDFs$name.nonRep))
#~ warning(paste("ratioDFs after:",printColTypes(ratioDFs)))
if ("name.rep" %in% colnames(ratioDFs)) {
ratioDFs$name.rep <- factor(ratioDFs$name.rep, levels = unique(ratioDFs$name.rep))
}
if ("name.nonRep" %in% colnames(ratioDFs)) {
ratioDFs$name.nonRep <- factor(ratioDFs$name.nonRep, levels = unique(ratioDFs$name.nonRep))
}
##  First ratio
ratioNames <- unique(paste(as.character(ratioDFs$name.rep),as.character(ratioDFs$name.nonRep)))
firstRatioName <- ratioNames[1]
if (length(grep(" ",firstRatioName))==1) {
ratio <- unlist(strsplit(firstRatioName," "))
rep <- ratio[1]
nonRep <- ratio[2]
firstRatio <- ratioDFs[ratioDFs$name.rep==rep & ratioDFs$name.nonRep==nonRep,]
}
##  If region is supplied, create the wee genome dataframe
if (class(region)=="character") {
#~ region <- as.character(region)
if (length(grep(":",region))==1) {
region <- unlist(strsplit(unlist(strsplit(region,"-")),":"))
genome <- data.frame(chrom=as.character(region[1]),chromStart=as.integer(region[2]),chromEnd=as.integer(region[3]))
xAxisName <- paste("Chromosome",region[1],"coordinates")
}
#~ } else {
#~ genome<-genome[genome$chrom==region,]
#~ xAxisName <- paste0("Chromosome ",region,"coordinates")
} else {
if (is.null(genome)) {
##  Genome is not supplied
## create genome dataframe using a helper function based on the first sample
genome <- makeGenome(firstRatio)
} else { ## genome dataframe is supplied
##  remove missing chromosomes from the genome
goods<-intersect(levels(firstRatio$chrom),levels(genome$chrom))
if (!all(levels(genome$chrom) %in% goods)) {
genome<-genome[genome$chrom %in% goods,]
genome$chrom<-factor(genome$chrom,levels=unique(genome$chrom))
rownames(genome) <- 1:nrow(genome)
}
}
xAxisName <- "Chromosome coordinates"
}
##  Make nice x-axis labels using a helper function
theMax <- max(genome$chromEnd)
theMin <- min(genome$chromStart)
labels <- makeLabels(theMin,theMax,"b")
##  Get the bin size for the first sample
bin <- firstRatio$chromEnd[1]-firstRatio$chromStart[1]
##  load ggplot2 library and set plotting theme
fontSize <- 10
pointSize <- 1 / 0.352777778
require(ggplot2)
gplotTheme<-theme(
text = element_text(family="Arial",size=fontSize),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5,size=rel(1.8)),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_line(colour="gray50",size=.5),
axis.title = element_text(size = rel(1.6),face="bold"),
axis.text.y = element_blank(),
axis.text.x = element_text(size=rel(1.4)),
legend.position="bottom",
legend.spacing.x=unit(0,"cm"),
legend.title=element_blank(),
legend.text = element_text(size=rel(1.2)),
legend.key = element_blank(),
legend.key.size = unit(c(0.4,0.4),"cm"),
strip.background = element_blank(),
strip.text = element_blank(),
plot.margin = unit(c(0.2,0.2,0.2,0.2), "cm")
)
##  start creating plot object - labels, scales names etc.
plot <- ggplot(genome)
plot <- plot + scale_y_continuous(
name="Relative copy number",
limits = c(0.8, 2.2)
)  ##  y scale
plot <- plot + annotate(
geom="segment",
x=0,
xend=0,
y=1,
yend=2,
colour="gray50",
lwd=0.5
)  ##  y scale line
plot <- plot + scale_x_continuous(
breaks=labels$ticks,
labels=labels$labels,
name=xAxisName,
limits=c(theMin-(theMax-theMin)/50,theMax+(theMax-theMin)/50),
expand=c(0.02,0.02)
)  ##  x scale
if (class(region)=="logical") {
plot <- plot + facet_grid(
chrom ~ .,
scales = "free",
space = "free_x"
)  ##  Facet
plot <- plot+geom_text(
aes(x=chromEnd+(theMax-theMin)/100,y=1.5,label=chrom),
angle=270,
size=fontSize/pointSize,
vjust=0
)  ##  Chromosome labels
plot <- plot + geom_segment(
aes(x=0,xend=genome$chromEnd,y=0.9,yend=0.9),
size=.7
)  ##  Chromosome length line
}
plot <- plot + geom_segment(
aes(x=0,xend=chromEnd,y=1,yend=1),
linetype="dashed",
size=.25,
color="gray40"
)  ##  Lower y line
plot <- plot + geom_segment(
aes(x=0,xend=chromEnd,y=2,yend=2),
linetype="dashed",
size=.25,
color="gray40"
)  ##  Upper y line
plot <- plot + geom_text(
aes(x=theMin-(theMax-theMin)/100,y=1,label="1"),
size=fontSize/pointSize,
hjust=1
)  ##  Lower y break
plot <- plot + geom_text(
aes(x=theMin-(theMax-theMin)/100,y=2,label="2"),
size=fontSize/pointSize,
hjust=1
)  ##  Upper y break
if (is.null(guide)) {
##  plot everything (scatter + line)
##  Colors
dotColors <- c("gray50","deepskyblue4","orange3","darkolivegreen4","hotpink4","purple4","red3","yellow3")
lineColors <- c("gray60","deepskyblue3","orange2","darkolivegreen3","hotpink3","purple3","red2","yellow2")
##  Actions on every ratio in the supplied dataframe
i <- 0
for (ratioName in ratioNames) {
i <- i+1
if (length(grep(" ",ratioName))==1) {
ratio <- unlist(strsplit(ratioName," "))
rep <- ratio[1]
nonRep <- ratio[2]
currentRatio <- ratioDFs[ratioDFs$name.rep==rep & ratioDFs$name.nonRep==nonRep,]
geom <- paste0("geom_point(aes(x=chromStart+bin/2,y=ratio,color='",rep," (",nonRep,")'),data=currentRatio,size=0.1)")
plot <- plot + eval(parse(text=geom)) ##  Raw data
if ("splineSmooth" %in% colnames(currentRatio)) {
geom <- paste0("geom_line(aes(x=chromStart+bin/2,y=splineSmooth,group=group),color='",lineColors[i],"',data=currentRatio)")
plot <- plot + eval(parse(text=geom))
}
}
}
plot <- plot + scale_colour_manual(values=dotColors,guide = guide_legend(override.aes = list(size=2)))##  manual color scale
} else {
##guided plotting (shiny interface)
#~ warning(paste("guide df before:",printColTypes(guide)))
##  undoing damage done by reactive value storage
guide$order <- unlist(guide$order)
guide$name.rep <- factor(guide$name.rep,levels=unique(guide$name.rep))
guide$name.nonRep <- factor(guide$name.nonRep,levels=unique(guide$name.nonRep))
#~ guide$geom <- unlist(guide$geom)
guide$raw <- unlist(guide$raw)
guide$smooth <- unlist(guide$smooth)
guide$color <- unlist(guide$color)
#~ warning(paste("guide df after:",printColTypes(guide)))
#~ rows <- which(!is.na(guide$order) & (guide$raw | guide$smooth))[order(na.omit(guide$order),decreasing=T)]
#~ warning(paste("guide order column:",paste0(guide$order,collapse="")))
guide <- guide[order(guide$order,decreasing=T,na.last = T),]
rownames(guide) <- 1:nrow(guide)
layers <- length(na.omit(guide$order))
geoms <- c("geom_point","geom_ribbon","geom_segment")
geom_pars <- c(
paste0("geom_point(aes(x=chromStart+bin/2,y=ratio,color='changeMe'),size=0.2,data=currentRatio)"),
paste0("geom_ribbon(aes(x=chromStart+bin/2,ymin=0.95,ymax=ratio,fill='changeMe'),data=currentRatio)"),
paste0("geom_segment(aes(x=chromStart+bin/2,xend=chromStart+bin/2,y=0.95,yend=ratio,color='changeMe'),data=currentRatio)")
)
geom_str <- geom_pars[match(geom,geoms)]
#~ if (guide$geom[i] != "geom_ribbon") {
#~ colors <- append(colors,guide$color[i])
#~ } else {
#~ fills <- append(fills,guide$color[i])
#~ }
sampleNames <- character()
for (i in 1:layers) {
rep <- guide$name.rep[i]
nonRep <- guide$name.nonRep[i]
sampleName <- paste0(rep," (",nonRep,")")
sampleNames <- append(sampleNames,sampleName)
currentRatio <- ratioDFs[ratioDFs$name.rep==rep & ratioDFs$name.nonRep==nonRep,]
if (class(region)=="character") {
currentRatio <- currentRatio[currentRatio$chrom==region[1] & currentRatio$chromStart>=as.numeric(region[2]) & currentRatio$chromEnd<=as.numeric(region[3]),]
}
colors <- append(colors,as.character(guide$color[i]))
if (xor(as.logical(guide$raw[i]),as.logical(guide$smooth[i]))) { ##  Either raw only or smooth only
if (as.logical(guide$raw[i])) {
geom_string <- gsub("changeMe",sampleName,geom_str)
#~ geom <- paste0(guide$geom[i],"(aes(x=chromStart+bin/2,y=ratio,color='",rep," (",nonRep,")'),data=currentRatio)")
plot <- plot + eval(parse(text=geom_string))
} else {
geom_string <- gsub("changeMe",sampleName,geom_str)
geom_string <- gsub("=ratio,","=splineSmooth,group=group,",geom_string)
geom_string <- gsub("geom_point","geom_line",geom_string)
geom_string <- gsub("size=0.1,","",geom_string)
#~ geom <- paste0(guide$geom[i],"(aes(x=chromStart+bin/2,y=splineSmooth,color='",rep," (",nonRep,")'),data=currentRatio)")
plot <- plot + eval(parse(text=geom_string))
}
} else if (as.logical(guide$raw[i]) & as.logical(guide$smooth[i])) { ## Both
#~ geom <- paste0(guide$geom[i],"(aes(x=chromStart+bin/2,y=ratio,color='",rep," (",nonRep,")'),data=currentRatio)")
geom_string <- gsub("changeMe",sampleName,geom_str)
plot <- plot + eval(parse(text=geom_string))
geom_string <- paste0("geom_line(aes(x=chromStart+bin/2,y=splineSmooth,group=group),data=currentRatio,color='",as.character(guide$color[i]),"')")
plot <- plot + eval(parse(text=geom_string))
}
}
warning(paste("geom: ",paste(geom),typeof(geom),class(geom)))
colors <- guide$color
names(colors) <- sampleNames
if (as.character(geom)=="geom_ribbon") {
warning("geom is ribbon")
plot <- plot + scale_fill_manual(
values=colors,
guide = guide_legend(override.aes = list(size=rep(2,layers)))
)
} else {
warning("geom is not ribbon")
plot <- plot + scale_colour_manual(
values=colors,
guide = guide_legend(override.aes = list(size=rep(2,layers)))
)
}
}
##  optional plot features
if ("cen" %in% colnames(genome)) {
plot<-plot+geom_vline(aes(xintercept=cen),color="green3")
}
if (!is.null(circles)) {
plot <- plot+geom_point(aes(x=chromStart+window/2,y=0.9,fill=circlesName),data=circles,color="black",size=2,shape=21)
}
if (!is.null(rectangles)) {
plot <- plot+geom_rect(aes(xmin=start,xmax=end,ymin=0.83,ymax=0.97),data=rectangles,color="red",fill=NA)
}
if (!is.null(pointers)) {
plot <- plot+geom_point(aes(x=chromStart+window/2,y=1,fill=pointers.name),data=pointers,size=3,shape=25,stroke=0.5)
}
##  custom theme
plot <- plot + gplotTheme
##  and we're done
if (plotting) {
if (region==F) {
X11(width=7,height=10,pointsize=15)
} else {
X11(width=7,height=3,pointsize=15)
}
plot
} else {
return(plot)
}
}
###  makeGenome helper function
###  creates genome dataframe based on a supplied bed/ratio dataframe
###  understands regions in 'chrX' or 'chrX:1000-2000' format
###  supplies axis name as a comment to the genome dataframe
makeGenome <- function(DF,region=F) {
if (region==F) {
##  using the whole supplied dataframe
DF$chrom <- factor(DF$chrom,levels=unique(DF$chrom))
chroms <- as.character(levels(DF$chrom))
ends <- vector(mode="numeric",length=0)
midY <- vector(mode="numeric",length=0)
if ("score" %in% colnames(DF)) {
for (chr in chroms) {
ends <- append(ends,max(DF[DF$chrom==chr,"chromEnd"]))
midY <- append(midY,max(DF[DF$chrom==chr,"score"])/2)
}
} else if ("ratio" %in% colnames(DF)) {
for (chr in chroms) {
ends <- append(ends,max(DF[DF$chrom==chr,"chromEnd"]))
midY <- append(midY,max(DF[DF$chrom==chr,"ratio"])/2)
}
}
genome <- data.frame(
"chrom"=as.character(chroms),
"chromStart"=as.integer(rep(0,length(chroms))),
"chromEnd"=as.integer(ends),
"midY"=as.numeric(midY))
attr(genome,"axisName") <- paste("Chromosome coordinates")
} else {
genome <- data.frame(chrom=as.character(NA),chromStart=as.integer(NA),chromEnd=as.integer(NA),stringsAsFactors=FALSE)
##  if region is supplied, first create the region DF
region <- as.character(region)
if (length(grep(":",region))==1) {
region <- unlist(strsplit(region,":"))
tmp <- unlist(strsplit(region[2],"-"))
region <- c(region[1],tmp)
} else {
tmp <- c(0,max(subset(DF,chrom==region,select="chromEnd")$chromEnd))
region <- append(region,tmp)
}
if (length(region)==3) {
if (region[3]>region[2]) {
genome[1,1] <- as.character(region[1])
genome[1,2] <- as.integer(region[2])
genome[1,3] <- as.integer(region[3])
} else {
stop("Supplied region end should be bigger than region start")
}
} else {
stop("Couldn't understand the supplied region. Please supply it as a string in 'chrX' or 'chrX:1000-2000' format.") 
}
attr(genome,"axisName") <- as.character(paste(region[1],"coordinates"))
}
return(genome)
}
###  makeLabels helper function
###  creates named vector of labels based on supplied minimum and maximum values
###  units may be added
makeLabels <- function(theMin,theMax,unit="") {
step <- 10^floor(log10(theMax-theMin))
if ((theMax-theMin)/step < 6) step <- step/2
if ((theMax-theMin)/step < 6) step <- step/2
if ((theMax-theMin)/step < 6) step <- step/2.5
minTick <- step*ceiling(theMin/step)
if ((minTick-theMin)/step > 0.5) minTick <- minTick-step
maxTick <- step*floor(theMax/step)
if ((theMax-maxTick)/step > 0.5) maxTick <- maxTick+step
labels <- seq(from = minTick, to = maxTick, by = step)
if (log10(step) < 0) {
prefix <- switch(abs(ceiling(log10(step)/3))+1,"","m","μ","n","p","f","a")
divisor <- switch(abs(ceiling(log10(step)/3))+1,1,0.001,0.000001,0.000000001,0.000000000001,0.000000000000001,0.000000000000000001)
} else {
prefix <- switch(floor(log10(step)/3)+1,"","k","M","G","T","P","E")
divisor <- switch(floor(log10(step)/3)+1,1,1000,1000000,1000000000,1000000000000,1000000000000000,1000000000000000000)
}
names <- paste0(labels/divisor,prefix,unit)
names <- gsub(paste0("^",0,prefix,unit),"0",names)
labels <- data.frame(ticks=labels,labels=names)
return(labels)
}
# use this function to determine hex colors:
getColorHex <- function(color)
{
c <- col2rgb(color)
sprintf("#%02X%02X%02X", c[1],c[2],c[3])
}
# a function to help debugging. Prints column types in a dataframe
printColTypes <- function(df) {
string <- character()
colNames <- names(df)
for (i in 1:ncol(df)) {
string <- paste0(string,colNames[i],":",typeof(df[,i]),",",class(df[,i]),"|")
}
return(string)
}
ls()
wtRatio <- normaliseRatio(dbf4Ratio)
gplotRatio(wtRatio)
gplotRatio(wtRatio$ratio)
wtRatio<-trimRatio(wtRatio,0.95,2.1)
gplotRatio(wtRatio$ratio)
s2 <- loadBed("/media/dzmitry/DATA/Dropbox/DNA replication/Scripts/Shiny/plotGenome_v.1.0/shinyExample/Dbf4-9Myc_S.bed")
ls()
s2$chrom <- factor(s2$chrom,levels=c(as.character(paste0("chr",as.roman(1:16))),"chrM"))
s2 <- rmChr(s2,"chrM")
s2 <- rmMax(s2,2)
Dbf4-9mycRatio <- makeRatio(s2,g2)
Dbf4_9mycRatio <- makeRatio(s2,g2)
gplotRatio(Dbf4_9mycRatio)
gplotRatio(Dbf4_9mycRatio$ratio)
Dbf4_9mycRatio <- normaliseRatio(Dbf4_9mycRatio)
gplotRatio(Dbf4_9mycRatio$ratio)
Dbf4_9mycRatio <- trimRatio(Dbf4_9mycRatio,0.8,2.2)
gplotRatio(Dbf4_9mycRatio$ratio)
Dbf4_9mycRatio <- trimRatio(Dbf4_9mycRatio,0.9,2.1)
gplotRatio(Dbf4_9mycRatio$ratio)
ls()
ratios <- rbind(wtRatio,Dbf4_9mycRatio)
head(ratios()
head(ratios)
tail(ratios)
ratios <- smoothRatio(ratios,5,5)
head(ratios)
tail(ratios)
save(ratios,dbf4Ratio,dbf4_s,ori,sacCer3,file='plotGenome.RData')
integer(1,2)
integer(c(1,2))
as.integer(1,2)
as.integer(c(1,2))
guide = data.frame(
order=as.integer(c(1,2)),
name.rep=as.character(c("Dbf4_S","Dbf4-9myc_S")),
name.nonRep=as.character(rep("Dbf4_G2",2)),
geom=as.character(rep("geom_point",2)),
raw=as.logical(rep(T,2)),
smooth=as.logical(rep(F,2)),
color=as.character("gray50","royalblue1"),
stringsAsFactors=F
)
guide
guide = data.frame(
order=as.integer(c(1,2)),
name.rep=as.character(c("Dbf4_S","Dbf4-9myc_S")),
name.nonRep=as.character(rep("Dbf4_G2",2)),
geom=as.character(rep("geom_point",2)),
raw=as.logical(rep(T,2)),
smooth=as.logical(rep(F,2)),
color=as.character(c("gray50","royalblue1")),
stringsAsFactors=F
)
guide
guide = data.frame(
order=as.integer(c(1,2)),
name.rep=as.character(c("Dbf4_S","Dbf4-9myc_S")),
name.nonRep=as.character(rep("Dbf4_G2",2)),
geom=as.character(rep("geom_point",2)),
raw=as.logical(rep(T,2)),
smooth=as.logical(rep(T,2)),
color=as.character(c("gray50","royalblue1")),
stringsAsFactors=F
)
guide
save(guide,ratios,dbf4Ratio,dbf4_s,ori,sacCer3,file='plotGenome.RData')
q()
